package homework.h6;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ArraysTest {

    private Arrays target;

    @BeforeEach
    void init() {
        target = new Arrays();
    }

    // Opdracht 3.
    @Test
    void doubleLongArraysLengthTest() {
        // given
        long[] easyTestInputArr = {1, 2, 3, 4};
        long[] emptyTestInputArr = new long[0];
        long[] testInputArrNegatives = {-34, -34, 0, 13123, -12312};

        // when
        long[] easyTestResult = target.doubleLongArraysLength(easyTestInputArr);
        long[] emptyTestResult = target.doubleLongArraysLength(emptyTestInputArr);
        long[] negativesTestResult = target.doubleLongArraysLength(testInputArrNegatives);

        // then
        long[] easyExpectedResultArr = {1, 2, 3, 4, 0, 0, 0, 0}; // input: {1, 2, 3, 4};
        long[] emptyExpectedResultArr = {}; // input: {};
        long[] negativesExpectedResultArr = {-34, -34, 0, 13123, -12312, 0 ,0 ,0 ,0, 0}; // input: {-34, -34, 0, 13123, -12312};

        assertArrayEquals(easyExpectedResultArr, easyTestResult);
        assertArrayEquals(emptyExpectedResultArr, emptyTestResult);
        assertArrayEquals(negativesExpectedResultArr, negativesTestResult);
    }

    @Test
    void fiboArrTest() {
       // given
        long[] nIs10_fiboArr = {0, 1, 1, 2, 3, 5, 8, 13, 21, 34};
        long[] nIs93_fiboArr = {0L, 1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L, 2584L, 4181L, 6765L, 10946L, 17711L, 28657L, 46368L, 75025L, 121393L, 196418L, 317811L, 514229L, 832040L, 1346269L, 2178309L, 3524578L, 5702887L, 9227465L, 14930352L, 24157817L, 39088169L, 63245986L, 102334155L, 165580141L, 267914296L, 433494437L, 701408733L, 1134903170L, 1836311903L, 2971215073L, 4807526976L, 7778742049L, 12586269025L, 20365011074L, 32951280099L, 53316291173L, 86267571272L, 139583862445L, 225851433717L, 365435296162L, 591286729879L, 956722026041L, 1548008755920L, 2504730781961L, 4052739537881L, 6557470319842L, 10610209857723L, 17167680177565L, 27777890035288L, 44945570212853L, 72723460248141L, 117669030460994L, 190392490709135L, 308061521170129L, 498454011879264L, 806515533049393L, 1304969544928657L, 2111485077978050L, 3416454622906707L, 5527939700884757L, 8944394323791464L, 14472334024676221L, 23416728348467685L, 37889062373143906L, 61305790721611591L, 99194853094755497L, 160500643816367088L, 259695496911122585L, 420196140727489673L, 679891637638612258L, 1100087778366101931L, 1779979416004714189L, 2880067194370816120L, 4660046610375530309L, 7540113804746346429L,};

        // Overflow expected!
        long[] nIs94_fiboArr = {0L, 1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L, 2584L, 4181L, 6765L, 10946L, 17711L, 28657L, 46368L, 75025L, 121393L, 196418L, 317811L, 514229L, 832040L, 1346269L, 2178309L, 3524578L, 5702887L, 9227465L, 14930352L, 24157817L, 39088169L, 63245986L, 102334155L, 165580141L, 267914296L, 433494437L, 701408733L, 1134903170L, 1836311903L, 2971215073L, 4807526976L, 7778742049L, 12586269025L, 20365011074L, 32951280099L, 53316291173L, 86267571272L, 139583862445L, 225851433717L, 365435296162L, 591286729879L, 956722026041L, 1548008755920L, 2504730781961L, 4052739537881L, 6557470319842L, 10610209857723L, 17167680177565L, 27777890035288L, 44945570212853L, 72723460248141L, 117669030460994L, 190392490709135L, 308061521170129L, 498454011879264L, 806515533049393L, 1304969544928657L, 2111485077978050L, 3416454622906707L, 5527939700884757L, 8944394323791464L, 14472334024676221L, 23416728348467685L, 37889062373143906L, 61305790721611591L, 99194853094755497L, 160500643816367088L, 259695496911122585L, 420196140727489673L, 679891637638612258L, 1100087778366101931L, 1779979416004714189L, 2880067194370816120L, 4660046610375530309L, 7540113804746346429L, -6246583658587674878L,};

        // when
        long[] nIs10_expectedResultArr = target.fiboArray(10);
        long[] nIs93_expectedResultArr = target.fiboArray(93);
        long[] nIs94_expectedResultArr = target.fiboArray(94);

        // then
        assertArrayEquals(nIs10_expectedResultArr, nIs10_fiboArr);
        assertArrayEquals(nIs93_expectedResultArr, nIs93_fiboArr);
        assertArrayEquals(nIs94_expectedResultArr, nIs94_fiboArr);
    }

    //long[] expectedResultArr = {2, 4, 6, 8}; // input: {1, 2, 3, 4};
}
